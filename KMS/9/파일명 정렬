#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

bool comp(vector<string> a, vector<string> b){
    string aUpper = a[0];
    string bUpper = b[0];
    transform(aUpper.begin(), aUpper.end(),aUpper.begin(), ::toupper);
    transform(bUpper.begin(), bUpper.end(),bUpper.begin(), ::toupper);
    if (aUpper.compare(bUpper) == 0){
        return stoi(a[1]) < stoi(b[1]);
    }
    if(aUpper.compare(bUpper) > 0) return false;
    else return true;
}


vector<string> solution(vector<string> files) {
    vector<string> answer;
    vector<vector<string>> file(files.size(), vector<string>(3));
    for(int i=0; i<files.size(); i++){
        int tmp = 0;
        int cnt = 0;
        for(int j=0; j<100; j++){
            if(files[i][j] < '0' || files[i][j] > '9'){
                file[i][tmp] += files[i][j];
            }
            else{
                cnt = j;
                tmp++;
                break;
            }
        }
        for(int j=0; j<100; j++){
            if(files[i][j+cnt] >= '0' && files[i][j+cnt] <= '9'){
                file[i][tmp] += files[i][j+cnt];
            }
            else{
                cnt += j;
                tmp++;
                break;
            }
        }
        for(int j=0; j<100; j++){
            if (j+cnt == files[i].size()) break;
            file[i][tmp] += files[i][j+cnt];
        }
    }
    stable_sort(file.begin(),file.end(), comp);
    for(int i=0; i<files.size(); i++)
        answer.push_back(file[i][0] + file[i][1] + file[i][2]);
    return answer;
}
